"""This is a template for State Machine Modules

   A State Machine module is a python file that contains a  `loop` function.
   Similar to how an Arduino program operates, `loop` is called continuously:
   when the function terminates, it is called again.

   The `loop` function should continuously listens to messages generated by:
   - the path detector (concerning the path to follow),
   - the sign detector (concerning road signs detected, if any),
   - the remote command operator (concerning commands to start/stop driving,
     or do specific manoeuvers)
   - and the arduino controller of the physical car (concerning the current
     state; possible sensor readings, ...)

   and decide on how to drive the car correspondingly. See the description of
   the `loop` method below for more details.

   This simplistic State Machine responds to remote commands "GO", "STOP"
   and "TEST_COMM". In addition, it listens to path information from the
   Simplistic Path detector, and sends actuation commands that are
   compatible with the simulator.
"""


import logging
import time
from event import Event
from car import Car
import socket

 

server = socket.socket()
server.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
logging.info(socket.gethostbyname(socket.gethostname()))
HOST = ''
POST = 5555
address = (HOST, POST) 
server.bind(address)  
server.listen(1) 
address = 0 
conn = 0 
def loop():
  global address
  global conn
  logging.info('hello world !!!!!!')
  if address == 0 :
    logging.info('listening for connnection...') 
    conn, address = server.accept() 
    logging.info('connection received | i know da wae ')
  else :
    logging.info('dis is da wae') 
    data = conn.recv(1024) 
    command = data.decode() 
    logging.info(command)
    if command == 'a' : 
      logging.info('right') 
      Car.send(0, 0, 2., 55.) 
    elif command == 'd' :
      logging.info("left") 
      Car.send(0, 0, 2., -55.)
    elif command == 'w' : 
      Car.send(0, 0, 2., 0.) 
    elif command == 's' : 
      Car.send(0, 0, -2., 0.) 
    else : 
      Car.send(0, 0, 0, 0) 


